---
import "@/styles/global.css";
import "@fontsource/source-sans-pro/400.css";
import "@fontsource/source-sans-pro/600.css";
import "@fontsource/source-sans-pro/700.css";
import "@fontsource-variable/source-serif-4";
import { ClientRouter } from "astro:transitions";
import { SITE } from "@/lib/config";
import type { ArticleMeta, Meta } from "@/lib/types";

type Props = { meta: Meta | ArticleMeta };
const { meta } = Astro.props;

const isArticle = (m: Meta | ArticleMeta): m is ArticleMeta => m.type === "article";

// Derive canonical (strips query/hash). Can be overridden by meta.canonical.
const canonical =
  (meta as any)?.canonical ??
  new URL(Astro.url.pathname.replace(/\/+$/, "/"), Astro.site).toString();

// Use metaTitle if available, otherwise fall back to title
const pageTitle = meta.metaTitle || meta.title;

// Ensure description is available
const pageDescription = meta.description || SITE.description;
---

<head>
  <!-- Global -->
  <meta charset={SITE.charset} />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <link rel="icon" href="/talview_favicon.svg" />

  <!-- Canonical -->
  <link rel="canonical" href={canonical} />

  <!-- Primary Meta -->
  <title>{pageTitle}</title>
  <meta name="title" content={pageTitle} />
  <meta name="description" content={pageDescription} />

  <!-- Open Graph -->
  <meta property="og:type" content={isArticle(meta) ? "article" : "website"} />
  <meta property="og:title" content={meta.title} />
  <meta property="og:description" content={pageDescription} />
  <meta property="og:url" content={canonical} />
  {meta.ogImage && <meta property="og:image" content={meta.ogImage} />}
  {meta.ogImageAlt && <meta property="og:image:alt" content={meta.ogImageAlt} />}

  <!-- Twitter Card -->
  <meta name="twitter:card" content="summary_large_image" />
  <meta name="twitter:title" content={pageTitle} />
  <meta name="twitter:description" content={pageDescription} />
  {meta.ogImage && <meta name="twitter:image" content={meta.ogImage} />}

  <!-- Article-specific -->
  {
    isArticle(meta) && (
      <>
        <meta property="article:published_time" content={meta.publishedTime} />
        <meta property="article:modified_time" content={meta.lastModified} />
        {meta.authors?.map((author) => (
          <>
            <meta name="author" content={author.name} />
            <meta property="article:author" content={author.name} />
          </>
        ))}
      </>
    )
  }

  <ClientRouter />
</head>